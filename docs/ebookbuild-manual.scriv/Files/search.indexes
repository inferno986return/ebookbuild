<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="0E872B99-EAAB-4308-B919-44645867118A">
            <Title>Introduction to Regular Expressions</Title>
            <Text>Introduction to Regular Expression

“Regular expressions describe patterns that may either match or fail to match against strings. The simplest regular-expression tool is grep(1), a filter that passes through to its output every line in its input matching a specified regexp.”
—Eric S. Raymond, Art of Unix Programming

Regular expression (or simply regex) is a programming language designed to match text via patterns rather than an exact string. Regular expressions have been incorporated into the find &amp; replace function of many text editors including Visual Studio Code, Atom and Notepad++.
Most of the syntax uses symbols called wildcards to represent characters within a text file such as: spaces, tabs, words and end of lines.
Try not to be put off by the intimidating syntax of regex because learning it is one of the best ways to save time and be efficient in e-book production. When I worked in commercial e-book development my colleague and I would frequently pass around a printout of Dave Child’s Regex cheatsheet (archive).
I recommend trying these examples yourself. You can modify an XHTML file or instead use RegEx Pal to test each regular expression safely away from your production code.

Tabs

Let’s start by adding two tabs to indent our indented paragraphs that use the &lt;p&gt;&lt;/p&gt; tags.    Type this in the find textbox within the Find function:

^&lt;p&gt;

This is a very simple piece of regex that only uses the caret (^) wildcard which represents the beginning of a line. This regex assumes there is no spacing or tabs prior to the start of the &lt;p&gt; tag.
Now for the regex to add the two tabs:

\t\t&lt;p&gt;

The \t wildcard represents a tab, so I’ve added two of them. Doing this indents your XHTML code nicely making it much easier to read. Try and imitate the indentation the text uses in the web browser to make debugging a lot easier.
You can recreate this example on RegEx Pal by typing this in the Test String box:

&lt;p&gt;

Spaces


Further reading

Introducing Regular Expressions (2012), Michael Fitzgerald, O’Reilly Publishing, ISBN: 978-1-449-39268-0





</Text>
        </Document>
        <Document ID="1B67AA19-6CBA-493E-AEBF-1E45B25BE441">
            <Title>Outline</Title>
            <Text>Outline
E-book formats
EPub
Mobi
Legacy formats
Required and recommended software
Text editor
Visual Studio Code (recommended)
Atom
Notepad++
Web browser
Brave (recommended)
Chrome
Firefox
Version control client
GitHub Desktop (recommended)
GitKraken - good, but $100 a year for commercial use
Alternative version control
Version control repository
GitHub (recommended)
GitLab
BitBucket
No version control
NAS setup
Terminal
Windows Terminal (recommended)
PDF reader
Adobe Reader DC (recommended)
Java SE
Python 3
E-book reader
Adobe Digital Editions (recommended)
Kindle Previewer (recommended)
Google Play Books
The ebookbuild folder structure
e-book
lib
META-INF
OEBPS
readme+licenses
Introduction to Visual Studio Code
What is a text editor?
The function keys
Introduction to Git
Introduction to XHTML
XHTML 101 - How XHTML works (head, body, declaration, tags, comments, entities)
Mozilla have a good reference for tags and browser compatibility
Heading tags - &lt;h1&gt;&lt;h2&gt;&lt;h3&gt;&lt;h4&gt;&lt;h5&gt;&lt;h6&gt;
Paragraph tags - &lt;p&gt;&lt;/p&gt;
Emphasis tags - &lt;b&gt;&lt;/b&gt; (formerly &lt;strong&gt;&lt;/strong&gt;) and &lt;i&gt;&lt;/i&gt; (formerly &lt;em&gt;&lt;/em&gt;), underline has no tag.
Span tags - &lt;span&gt;&lt;/span&gt;
Div tags - &lt;div&gt;&lt;/div&gt;
Image tags - &lt;img/&gt;
Break tags - &lt;br/&gt;
List tags - &lt;ol&gt;&lt;/ol&gt; and &lt;ul&gt;&lt;/ul&gt;, &lt;li&gt;&lt;/li&gt;
Table tags - &lt;table&gt;&lt;/table&gt;&lt;tr&gt;&lt;/tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;
Introduction to CSS
CSS 101 - How CSS works (classes, comments)
Introduction to Regular Expressions
Introduction to Typography
Typography 101
Screen vs print fonts
Classifications
Serif
Sans-serif
Monospace (fixed width)
Courier New
JetBrains Mono (recommended)
E-book-specific fonts
Bookerly
Ember
Roboto
Literata
Minion
Myriad
My first e-book
Common classes
Testing the e-book
Compiling the e-book

Appendices?

Manual of Style
Emphasis
Punctuation
Hyphens, en dashes and em dashes
Scene breaks
Annotated keyboard diagram
Explain the 
Regular expression cheatsheet
HTML entity table
HTML tag reference
Full zstylsheet CSS reference
ebookbuild code commentary
Background music suggestions
SOMA fm
Spotify
YouTube - Odysseus</Text>
        </Document>
        <Document ID="25AA13C0-6D21-4383-A6B6-50B28003E7F9">
            <Title>Manual of Style</Title>
            <Text>Manual of Style

The Chicago Manual of Style is a popular reference book for formal writing that is used worldwide. Taking inspiration from this I want to define best practices for writing that aren’t necessarily confined to just e-book development.

Paragraph alignment:

Text formatting:

Italic:
Italic is used as alternative to bold for emphasis to make a particular word or phrase more prominent to a reader. It is also common to italicise the names of works such as books, films, music and video games. For example I italicised the Chicago Manual of Style in this chapter’s introductory paragraph.

Superscript:
Superscripting makes the font smaller and places it above the cap height. It is commonly used for numerical ordinals such as 1st, 2nd, 3rd and 4th. As well as citational references, as you’ll have noticed throughout this book.

Subscript:
Subscripting makes the font smaller and places it below the baseline. It is commonly used for chemical formulae such as carbon dioxide (CO2) or sulphuric acid (H2SO4).

Small caps:
Small caps (Small Caps) are capital letters that are the same height as the lowercase letters (i.e. the font’s x-height).
They are commonly used stylistically for the names of people as a form of emphasis. For example, in some Christian Bible translations the word “Lord” is written in small caps such as in this Bible passage:

“12 Now the Lord had said unto Abram, Get thee out of thy country, and from thy kindred, and from thy father's house, unto a land that I will shew thee:” —Genesis 12:1, King James Version (KJV)

Unfortunately, some e-book reading software such as Adobe Digital Editions does not support small caps and ignores them. I don’t recommend relying on small caps compatibility for digital documents unless a supported font has been embedded.


Symbols:

Hyphens, en dashes and em dashes
When I started my first job I used a hyphen every time I wanted a dash. There are actually 3 types of dash and they each have a specific purpose:

Hyphen (-)
A hyphen is used to join (or concatenate) words together. For example: 
	e-mail, e-book

En dash (–)
An en dash gets its name because is the same width as a lowercase “n”. En dashes are used to join statements or to provide a numerical range. Using the English civil war Wikipedia page as an example, notice how the dates are connected with an en dash:

“The English Civil War (1642–1651) was a series of civil wars and political machinations between Parliamentarians (&quot;Roundheads&quot;) and Royalists (&quot;Cavaliers&quot;),”

Em dash (—)
An em dash is the same width as a lowercase “m”. Em dashes are used for quote attribution, such as:

“I am not young enough to know everything.” —J.M. Barrie

Speech marks:
Double speech marks (“, ”, &quot;)
Double speech marks (or quote marks) are used for speech in most European languages and can be used for defining attributes in XHTML. There are three double quote marks, a left quote (“), right quote (”) and a straight quote (&quot;). I prefer to use the curled left and right quote marks as they look more presentable. Some books such as How I Live Now by Meg Rossoff forgo speech marks entirely.
There are languages such as German, Hungarian and Polish that use different quote marks with the left pair sitting on the baseline.

Single speech marks (‘, ‘, ‘)
Double speech marks (or quote marks) are also used for speech in most European languages and can also be used for defining attributes in XHTML. There are three double quote marks, a left quote (‘), right quote (‘) and a straight quote (‘). 

Guillemets («, »)
Guillemets are used for speech by some languages such as French, Italian and Greek. They are functionally identical to double speech marks.

Single guillemets (‹, ›)
 Single guillemets are reportedly used for nested quotes (quotes within quotes) though I haven’t used them.

Paragraph symbols:

Pilcrow (¶)
The pilcrow (¶) is a mostly obsolete symbol used for defining the start of paragraphs. Pilcrows can be enabled in word processors such as Microsoft Word to assist with document layout.
A pilcrow is commonly used for stylistic purposes. For example, in the 1931 book An Essay on Typography by Eric Gill starts each paragraph with a pilcrow:

“¶ The theme of this book is Typography, and Typography as it is affected by the conditions of the year 1931. The conflict between industrialism &amp; the ancient methods of handicraftsmen which resulted in the muddle of the 19th century is now coming to its term.”

Some typefaces such as Doves Type and Lyon Display have distinctive pilcrow symbols. //diagram

Section (§)
The section symbol is used to mark individual numbered sections of a large document and is commonly used in the law profession. For example, section 1201 of Title 17 expressly forbids the circumvention of digital rights management (DRM) systems:

“17 U.S. Code § 1201 - Circumvention of copyright protection systems”

It is also the Simoleon currency symbol in the video game series SimCity and The Sims.

Asterisk (*)
The asterisk (*) means “little star” in Greek and is commonly used as the first reference in a chapter that uses citational referencing. It is also used a lot for print advertising such as billboards, posters and magazines.
Three asterisks in a series is often used to denote a scene break (***) between paragraphs.

Dagger (†)
The dagger (†) is commonly used for marking deceased people or extinct species to the right of their name. It is also used as the second reference in a chapter that uses citational referencing.

Double dagger (‡)
The double dagger (‡) is commonly used for the third reference in a chapter that uses citational referencing.

Triple dagger
There is a triple dagger symbol, though it has not been approved by Unicode and few fonts support it. If it does get ratified by the Unicode Consortium it could be used as a potential fourth symbol in citational referencing.

At symbol (@)
The at symbol (@) is mostly used for separating the mailbox name from the domain name in e-mail addresses. Some brands use…

Hash symbol (#)
The hash symbol (#) (also called the pound sign) is commonly used for hashtags. As well as for deno…
In e-book development, the hash symbol used for declaring numerical entities in XHTML by following the ampersand (&amp;). For example the entity &amp;#160; is for a non-breaking space. The hash symbol is also used in CSS to declare a hexadecimal colour. For example, the colour red is #FF0000.

Ampersand (&amp;)
The ampersand (&amp;) is commonly used to…

Ellipsis (…)
The ellipsis (…) is a series of three dots without a space and usually used to denote a quote or phrase which has more content.

Basic mathematical symbols:
These are the simple mathematical symbols for arithmetic usage which most fonts are likely to support.

Multiplication (×)
The multiplication symbol is used for multiplying values together. It’s also the correct way to write out screen resolutions. For example:

“A high definition monitor supports the 1920 x 1080 resolution.”

Divide ()

Minus ()

Plus (+)

Tilde (~)
The tilde is used for approximation. It is also used as a diacritic in some languages such as Spanish and Portuguese.

Brackets

Square brackets ([, ])
Square brackets are used to provide commentary when quoting an original source. For example, adding an extra word within a quote to provide better clarity, such as with this quote. I have left my contribution unitalicised to further state it’s not part of the original quote:

“The greatest hypnotist on planet Earth is an oblong box [television] in the corner of the room. It is constantly telling people what to believe is real!” —David Icke

Another use of square brackets in this way is to quote a misspelling, incorrect grammar or nonsensical content verbatim using [sic].




Referencing:
In formal writing there are two types of referencing, citational and parenthetical.

Citational references uses either a number or symbol at the end of a sentence, or in some cases at the end of a word. Usually this citation number is superscripted, though Wikipedia uses square brackets instead.

Parenthetical referencing uses… It’s best known as Harvard referencing as it was popularised by a Harvard University zoological paper… 




References:
https://www.biblegateway.com/passage/?search=Genesis+12&amp;version=KJV
https://www.grammarly.com/blog/en-dash/
https://www.grammarly.com/blog/why-you-should-love-the-em-dash/
https://en.wikipedia.org/wiki/Quotation_mark</Text>
        </Document>
        <Document ID="3E735A02-28ED-44F4-94C9-EDEF228BF9A8">
            <Title>Introduction to XHTML</Title>
            <Text>Introduction to XHTML

“XML is a very simple syntax resembling HTML — angle-bracketed tags and ampersand-led literal
sequences. It is about as simple as a plain-text markup can be and yet express recursively nested
data structures. XML is just a low-level syntax; it requires a document type definition (such as
XHTML) and associated application logic to give it semantics.” 
—Eric S. Raymond, Art of Unix Programming

XHTML (eXtensible HyperText Markup Language) is the recommended language for creating the actual chapters of an e-book, it combines regular HTML (HyperText Markup Language) that is used to create webpages with XML (eXtensible Markup Language). Alternatively, you can use regular HTML though you can’t define custom tags (or can you?) and web browsers are more tolerant of obvious syntax errors when testing.
So what is XHTML? To start with I have used Eric S. Raymond’s definition of XML as a springboard. All three standards are markup languages this means that the developer has to define what the file’s content will look like using some kind of syntax (if you understand LaTeX or Markdown this should be familiar), which in this case are tags.
Tags are made using a less-than symbol (&lt;) followed by one word, abbreviation or letter then by a greater-than symbol (&gt;), the text content itself is then written inside the tag and then closed with a closing tag that is identical though with a forward slash (/) after the less-than symbol. Some tags are “self-closing” this means that they are defined in just one tag with a less-than symbol, tag name, then the forward slash and the greater-than symbol. Each tag represents a specific type of content such as headings, paragraphs, images, tables, or numbered and bullet point lists. 
I would recommend taking a look at one of the .xhtml files of this e-book while I explain the concepts. 
There are 3 parts to an XHTML file:

Declaration - defines to the web browser or e-reader what the file is, what standard of HTML/XML and what character encoding it uses.
Head - defines to the web browser or e-reader, the files and metadata the XHTML file uses.
Body - defines the actual content that the user will see in their web browser or e-reader.

Declaration
We start the file with a declaration to let the e-reader or web browser know this is an XHTML file. I usually copy-paste this and leave it alone.

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot; ?&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;

I always use UTF-8 as it has a large language support including accented Latin characters, Greek and Cyrillic (the writing system used in Russia, Ukraine and several Baltic states).

Head
The head defines information about the XHTML file that the user doesn’t see. Similarly to the declaration, I barely change this except for the optional title tag so I can see the chaper’s name in my web browser during testing.

&lt;head&gt;
	&lt;meta content=&quot;http://www.w3.org/1999/xhtml; charset=utf-8&quot; http-equiv=&quot;Content-Type&quot;/&gt;
	&lt;link href=&quot;styles/zstylesheet.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;
	&lt;title&gt;Acknowledgements&lt;/title&gt;
&lt;/head&gt;

The head tag is where external CSS (Cascading StyleSheets) files (that use the .css file extensions) are declared.

Body
The body is all the content that the user will see (with the exception of comments) and is the majority of the XHTML file.

Heading tags
There are 6 tags for defining headings &lt;h1&gt;&lt;/h1&gt;, &lt;h2&gt;&lt;/h2&gt;, &lt;h3&gt;&lt;/h3&gt;, &lt;h4&gt;&lt;/h4&gt;, &lt;h5&gt;&lt;/h5&gt; and &lt;h6&gt;&lt;/h6&gt;. I don’t think I’ve used all of them in just one project though because there are classes defined for their specific use…

Paragraph tags

Image tag

Bullet point list tags

Numbered list tags

Table tags
Tables are a bit more difficult to define in XHTML, so I recommend arranging them neatly to avoid getting confused. There are 4 tags for defining tables &lt;table&gt;&lt;/table&gt;, &lt;tr&gt;&lt;/tr&gt;, &lt;th&gt;&lt;/th&gt; and &lt;td&gt;&lt;/td&gt;.

&lt;table&gt;&lt;/table&gt; behaves like a division tag and are the parent tags for the whole table. All table content will go inside these.

&lt;tr&gt;&lt;/tr&gt; are the table row tags and define each row.

&lt;th&gt;&lt;/th&gt; are the optional table heading tags.

&lt;td&gt;&lt;/td&gt; are the table data tags which defines each cell.


</Text>
        </Document>
        <Document ID="4CC8D85D-0226-4243-BBEF-174ED2BCCF7F">
            <Title>Google Keep notes</Title>
            <Text>
Documents vs e-books
Fixed and reflowable ePubs
Introduction to typography
Serif
Sans-serif
Monospace (or fixed-width)
E-book reader fonts
Unicode
Latin
Monotonic/Polytonic Greek
Cyrillic
Scene break
Dropcaps
Function keys on a keyboard
Anatomy of a book
The ePub standard documentation - epubcheck
Openness and transparency
How I got into e-book production – learnt at my first job where I attempted an apprenticeship.
I refer to Andy as mentor, after playing a lot of Assassin's Creed when I was conceptualising this book.
Steal this e-book with tape and crossbones
From what I understand reading about Eric S. Raymond and Richard Stallman, your approach and principles to software development stem from the environment you worked in.
The old system was a mixture of several programming languages, as well as a dependency on a popular productivity suite. To me this is an unnecessary dependency that creates vendor lock-in and limits portability.
Why use ebookbuild - vendor lock-in
The satisfaction of creating my open-source watchface Pokétch Digital and having it forked.
Daniel Pink on Drive and agile development
Harvard and numerical referencing
Plenty of examples of how to use tags
UTF-8, Unicode, and ASCII
Software - Text editors, ... One that is recommended and then others.
Create your own documentation and pull-request back stuff that is useful. Taken a gnuplot approach to development.
Notetaking via OneNote, though GitHub/GitLab have wiki pages.

ASCII table appendix?

I am very grateful to Wikipedia and Wikicommons for information and diagrams. This book is inspired by that by being Creative Commons licenced. Refer to Daniel Pink’s chapter in Drive about Wikipedia vs Encarta.

&quot;XML is a very simple syntax resembling HTML — angle-bracketed tags and ampersand-led literal
sequences. It is about as simple as a plain-text markup can be and yet express recursively nested
data structures. XML is just a low-level syntax; it requires a document type definition (such as
XHTML) and associated application logic to give it semantics.&quot;
-Eric S. Raymond, Art of Unix Programming



Future: ONIX, ePub 3, Bookscanning and OCR, 4 levels of indentation, GUI frontend for ebookbuild, ebookbuild rewrite, typesetting using InDesign or Affinity Publisher, audiobook production, distribution via Amazon Kindle, Google Play and itch.io, DRM, anti-piracy manifesto

Related formats such as cbz?</Text>
        </Document>
        <Document ID="7433E120-006A-4AE3-BCA4-90A934374CA0">
            <Title>Introduction to Typography</Title>
            <Text>Introduction to Typography

“Let’s kick off with the basics: what actually is typography? In essence, typography is the art of arranging letters and text in a way that makes the copy legible, clear, and visually appealing to the reader. Typography involves font style, appearance, and structure, which aims to elicit certain emotions and convey specific messages. In short, typography is what brings the text to life.” 
—Career Foundry, What Is Typography, And Why Is It Important? [2022 Guide]

Let’s start with some definitions:

Fonts are a representation of a typeface for a specific use such as on a computer.
Typography refers to the study, use and creation of typefaces.
Typefaces are lettering designs which can be upright or slanted, with different stroke thickness
Glyphs are each character, number, letter or symbol within a typeface.

Typography relies on several imaginary lines to ensure each glyph is positioned appropriately.

#
The different typographical lines and how they relate to the position of the word “Sphinx”

Baseline is the line which all letters sit upon.
Ascender is the line above the cap height. For example, letters that have a tall stem such as “h”, “b” and “d”.
Descender is the line below the baseline. For example, letters such as “p” and “q” .
X-height is the height of the lowercase “x” and most other lowercase letters.

Typography has been an important part of book design since its inception and remains significant when typesetting books and documents for either print or screen. 
In the case of e-books usually the default fonts are selected by the e-reader’s developer.
Typographical classifications:

Serif
Serif fonts have a stroke at the end of each letter and number, as well as other characters. 

2015 was a big year in the world of e-book typography because Google and Amazon commissioned bespoke fonts designed for long reading sessions on a screen.

Amazon has its own bespoke Bookerly font since 2015 primarily for its Kindle e-readers and reading apps.

Google has its own bespoke Literata font family…

Sans-serif
Monospaced (or fixed width)
Monospaced (also called fixed-width) fonts have each letter, number and symbol as the same width to assist with readability. They are usually used for technical purposes such as for programming or scriptwriting.
The two best known monospaced fonts are Courier and its sucessor Courier New.
Historically, Courier was designed by IBM for typewriters but was development into a computer font in the 1990s. Courier wasn’t trademarked, so there are many derivatives. 
Courier New was a redesign by legendary typographer Adrian Frutiger for Monotype with improved punctuation and to include support for more languages. It has been pre-installed as a system font since Microsoft Windows 3.1 and is a popular choice for programmers.
Nowadays, there are plenty of monospaced fonts to choose from that are either pre-installed on the operating system or can be downloaded for free. Examples include Consolas, IBM Plex Mono, Ubuntu Mono, 

JetBrains Mono is my current choice of monospaced font as it has clear lettering and is readable. When choosing a monospaced font for e-book development I would recommend checking the quote marks as they are often not clear at smaller sizes. //example

A comparison of Roboto Mono and JetBrains Mono.

Character encoding standards:
To make writing systems work on computers there are two main standards for character encoding, the American Standard Code for Information Interchange (ASCII) and it’s successor Unicode.
ASCII was simplistic and only defined the uppercase and lowercase English alphabet, numbers, a select group of symbols and a set of invisible control characters.

#
These are all of the printable ASCII characters

Unicode is instead a more complete representation of the world’s writing systems and supports over 150 different languages both modern and ancient.
Each supported glyph within Unicode is part of a group of glyphs called a block. As it’s a superset of ASCII, the first block called Basic Latin contains all the ASCII characters. If you need a particular character it is likely already available in a Unicode block, though keep in mind very few fonts support Unicode completely.
It’s also worth knowing about Windows Glyph List (WGL) fonts

References:
https://en.wikipedia.org/wiki/Courier_(typeface)#Courier_New
https://www.fonts.com/content/learning/fontology/level-1/type-anatomy
https://www.toptal.com/designers/typography/typeface-classification
https://unicode.org/charts/PDF/U0000.pdf</Text>
        </Document>
        <Document ID="93C40D99-4B3D-4900-9243-676053C92F0D">
            <Title>Future content</Title>
            <Text>Future Content
These are chapters I don’t have much content for at the moment. Stay tuned!

Other typographical classifications:

Script

Display
Display fonts are decorative and designed for use at large sizes.

Blackletter
Blackletter fonts are calligraphic and originate from Western Europe in the 12th century.
They aren’t used very often because they aren’t easy to read.

Bookscanning and OCR

In my last job my boss used an inverted “V” cradle made from glass and metal, then would take a photograph of each page using a DSLR camera. The photos would be imported into ABBYY FineReader for the text to be extracted using optical character recognition (OCR), before exporting to a Microsoft Word document. He considered this a significant improvement over the previous method of destructively removing each page individually from the binding and then scanning them with a flatbed scanner.
I am still developing my bookscanning process. I have been looking into free software alternatives to ABBYY FineReader such as Google’s Tesseract which is used in OpenOCR. I often make use of Google Photos’ own OCR engine and find it highly accurate. In the long-term I plan on purchasing and testing the CZUR book scanner.
https://www.diybookscanner.org/en/index.html has instructions on a homemade bookscanner. The website looks to have been neglected for a significant period of time and has missing images. Check https://archive.is/

Typesetting

Affinity Publisher (recommended)
Adobe InDesign

E-book distribution

You now have a finished ePub. But how do you sell it?

Amazon Kindle - Kindle Unlimited
Google Play Books
Apple Books
Kobo
itch.io

Digital Rights Management (DRM)

The ePub standard is intentionally neutral on the use of digital rights management (DRM) to control how customers interact with their e-book purchase. I am personally hostile to DRM because I find it inconvenient for the customer and most e-book DRM standards are bypassable anyway with freely-available public tools.
In my own research the DRM scheme I found the most difficult to bypass was VitalSource’s e-book file .vbk. Previously it was possible to see the XHTML source with the Chrome inspector, though that was patched recently after.

Adobe DRM (ADEPT)

Adobe DRM is used by Google Play Books and several other distributors, allowing offline reading on Adobe Digital Editions and Bluefire. It requires the user to activate Adobe Digital Editions with their Adobe ID (or create one), then authorise their computer. Once authorised download the .acsm file and then import it to download the actual ePub.

Adobe allow a total of 6 authorisations and it seems that resetting this amount requires contacting their customer support: https://community.adobe.com/t5/digital-editions-discussions/i-need-to-have-my-authorizations-reset-for-digital-editions-but-cannot-contact-anyone-at-adobe/td-p/5511638

From personal experience I have found Adobe DRM to be difficult to use requiring first contacting Google’s customer support and then on online forums for activation.
Keep in mind that when distributing using Adobe Digital Editions the XHTML and CSS code is accessible by extracting the ePub using an archiving program like 7-Zip.

Amazon DRM - AZW, KFX

Amazon use their own DRM for their Kindle e-books. The current standard is (KFX). Amazon provide reading apps on the web, smartphone/tablet and on Windows and macOS…

Copyright infringement of e-books (piracy)

“Piracy's a crime and crime doesn't pay
	And we go home poor at the end of the day
But I'd rather live my life in rags
	Than be chained to a desk with a wife that's a hag”
Drink, Alestorm

I plan on this to be either a subset of my piracy manifesto or just copied verbatim. I like the idea of using the Alestorm lyrics to introduce this chapter.

Currently, my TL;DR on e-book piracy is that most DRM for e-books is technically ineffective and can be inconvenient for users. If you want DRM that actually works I recommend distributing on Vitalsource’s Bookshelf store.
I think it’s better to reduce DRM and foster goodwill with users. Humble (formerly Humble Bundle) and O’Reilly have demonstrated that DRM-free is a viable option that doesn’t result in sudden bankruptcy.
Also much of the data on piracy is surprising including that pirates buy more content and is more nuanced than what large publishers, movie studios and record labels purport.

ONIX for Books

ONIX for Books is an XML-based standard for sharing book data between publishers, distributors and retailers using predefined fields and categories (defined as “code lists”).
I plan on creating my own libre ONIX editor and documentation for the perfect ONIX document. However, for the time being I recommend looking into ONIXEdit or creating your own ONIX record using spreadsheet software such as Microsoft Excel.
https://www.editeur.org/14/Code-Lists/

Source code obfuscation
“In software development, obfuscation is the deliberate act of creating source or machine code that is difficult for humans to understand.” 
-Obfuscation (software) article on Wikipedia

Source code obfuscation in software development makes it trickier to reverse-engineer a compile executable to find the original source code. Usually these are alterations made before or during compile time which don’t alter functionality.
While ebookbuild is libre software, I am interested in ways of achieving this for users who want an output that hides the exact XHTML and CSS code from a tinkering end-user.
After giving this process some thought I can only think of using Calibre ( ironically given ebookbuild’s goal to avoid autogenerated “meatground” code inside its ePub output). Calibre in my experience has a complex structure to its XHTML and CSS structure.

Fingerprinting

Fingerprinting is a method for identifying unique builds of an e-book. This could be used for review copies or ARC (advanced reader copies) to identify who leaked an e-book prior to release.
So far my only approach is to rely on checksums as they are unique to each build. Another way is to add comments referring to the reviewer in the XHTML or CSS code.</Text>
        </Document>
        <Document ID="9C43D21D-C973-4DD8-857E-08EB9C396879">
            <Title>Preface</Title>
            <Text>Preface

Welcome to e-book development - much of this preface is expository, feel free to skip ahead.
Standing on the shoulders of giants
I want to impart over 2 years of knowledge and experience I learned about e-book development. As well as the improvements I have made since then.
My tenure at Oxford Ebooks Ltd.
My failed apprenticeship - I learnt a lot during my 1 year working at Oxford Ebooks…
What I learnt at marketing - we had a scattershot approach for picking up prospects - years later I would encounter The One Page Marketing Plan and realise how flawed this was.
Philosophical differences between myself and Andy Severn. What I recall from 6 years ago. The highly competitive video game industry has very little room for free software philosophy, except for a few exceptions such as Doom.
The job got me into digital book content
I still buy books published by Oxford eBooks and sci-fi-cafe.com.
I listen to audiobooks on Audible, infact I secured a free copy of The Seed Planet
I recommend A Clockwork Orange by Anthony Burgess and The Art of the Argument by Stefan Molyneux, in particular. If you are particularly ready to have your perspective of heterosexual relations completely torn up I would also suggest The Rational Male book series by Rollo Tomassi.
Why use ebookbuild?
An open approach to e-book development using free software principles of open source code and abundant documentation. As well as cross-platform technologies with no vendor lock-in.
Entire control over the e-book’s presentation
No “meatgrinding” - The pitfalls of autogenerated code

This book is interactive. Feel free to check the e-book code on GitHub.</Text>
        </Document>
        <Document ID="AA04C080-54B1-4AA8-993B-21F0F0F09032">
            <Title>Preface</Title>
            <Text>Preface

“If I have seen further than others, it is by standing upon the shoulders of giants.”
—Isaac Newton, in a 1675 letter to Robert Hooke

I have written this preface to explain the my justification for the ebookbuild project and my motivations for creating it. If this isn’t interesting to you, feel free to skip ahead.

Welcome to e-book development

By reading this book you are at least curious about the process of e-book development and the best way to have complete control over your project.

Why ebookbuild?

Origins

The ebookbuild project exists, because I am unsatisfied with using the current e-book development software out there and want full control over my projects.
I started my first job back in September 2014 at the age of 21, working for Oxford eBooks Ltd.
Oxford eBooks a very small publishing house that provided e-book development services for a variety of clientele ranging from both small and medium publishers, as well as independent authors.
E-books created there were made from scratch using XHTML and CSS in a text editor, quickly tested using a web browser to ensure the chapters are at least visible and then compiled using proprietary tools to generate a ePub file. 
The ePub would be run through epubcheck, the official tool created by the owner of the ePub standard to ensure it had “No errors or warnings detected.” An e-book that repeatedly failed epubcheck would need to be continuously worked on until it was ready for final testing.
Testing was performed in e-reader to ensure it at least matched, or even improved the supplied manuscript. Any alterations would be recorded in a conversion log which allowed for easy scrutiny and reversion (to revert).
This meticulous approach to e-book development is the foundation and chief inspiration for the ebookbuild project.

Improvements

At the time I created Project Zylon as a means to continue e-book development after I left Oxford eBooks Ltd. a year later. After consideration I wanted to formerly name the project as something relevant, easy to remember and that would resemble a terminal command so I chose ebookbuild. This is why I stylistically choose to write ebookbuild in a monospaced font.
I had formally been introduced to both the concept and development process of an e-book, but wanted to do more with the technology as much of the e-book projects I worked on were novels, religious books and the occasional non-fiction biography. I wanted new projects such as cookbooks, technology books and antiquarian remasters.
Another desire, was to release the source code publicly under a licence approved by either the Open Source Initiative (OSI) or the Free Software Foundation (FSF) to facilitate further improvements and usage. I have admired the concept of free software since I first learnt about it in 2012 and my affection for it went up when I released my Pokétch Digital watchface for the Pebble smartwatch under the permissive MIT licence. The project has 10 stars on GitHub and been forked several times which is impressive considering I am by no means a C programmer.

//Picture of the Pokétch Digital watchface

The old tools that used and I can barely speak of in fear of reprisal weren’t ideal and violated core principles. I had become accustomed to these principles when reading about the history and philosophy of free software (as defined by Richard Stallman and the GNU project), so I wanted something I had complete control over that could grow into a useful set of tools for anyone with an interest in creating e-books from scratch.
I created the ebookbuild so it had no proprietary dependencies and could be used cross-platform. Then made it available under GNU General Public License 3 (GPLv3) to encourage, but also enforce sharing the tool to make it available to as many interested people as possible.

#
Much of the ebookbuild project is licenced under GNU GPLv3.

One of the prerequisites for free software is good documentation. So I have created an e-book that references as much as I have learnt in my one year in commercial e-book development, but the many years after. I want to make it accessible as possible so I have released it under a Creative Commons licence to encourage mass-sharing. The source code is on GitHub and I encourage raising issues and pull requests.
Lastly, I released technical files that are required for e-book production such as XHTML, CSS and JSON files under the Creative Commons Zero (CC0) licence, making them effectively public domain. I don’t think the code used for these files isn’t particularly special or unique, so they can be re-purposed outside of ebookbuild uncredited, though credit is appreciated.


References:

1. Note: My former boss was stringent about trade secrecy and non disclosure agreements (NDA),  owing to his background in video game development. I have described the process I was taught using a combination of information from the business terms page on the company website, as well as other public sources.

2. The GNU project defines free software as: “Free software” means software that respects users' freedom and community. Roughly, it means that the users have the freedom to run, copy, distribute, study, change and improve the software. Thus, “free software” is a matter of liberty, not price. To understand the concept, you should think of “free” as in “free speech,” not as in “free beer.” We sometimes call it “libre software,” borrowing the French or Spanish word for “free” as in freedom, to show we do not mean the software is gratis.
You may have paid money to get copies of a free program, or you may have obtained copies at no charge. But regardless of how you got your copies, you always have the freedom to copy and change the software, even to sell copies.

3. It’s worth juxtaposing copyleft with copyfree.
	Copyleft licencing such as GPLv3 ensures all publicly released copies of a program must have their source code available with the permission to make alterations and compile them into a new program.
	Copyfree licencing such as MIT ensures the developer who first modifies the source code has control over the availability of the source code, alterations made to it and distribution of the new program.





</Text>
        </Document>
        <Document ID="ACD131AA-5177-42FB-8152-CC3A73D2FF81">
            <Title>Introduction to Git</Title>
            <Text>Introduction to Git


Before Git

Back at Oxford eBooks we simply mounted shared folders from a company network-attached storage (NAS) server onto our work computers using the Server Message Block (SMB) protocol. We then altered the contents of the e-book project directly using File Explorer.
Presumably, this NAS server was configured with multiple hard drives in a redundant arrangement of independent disks (RAID) configuration. It would then have regular backups to reduce data loss. In simple terms, RAID combines hard drives together to make them work more efficiently. The company had a strict on-premises data policy and use of the cloud was avoided due to concern of a possible data breach.
While a NAS solution is acceptable for an individual or small team developing e-books, I prefer using a version control system such as Git which is connected to a cloud hosting service such as GitHub or GitLab for the following reasons:

Allows developers to log alterations made with commit logs and clearly shows differences between each commit
Commits can be reverted easily without guesswork as to what was changed previously
Easily syncronises the data between multiple servers and user computers
Designed specifically for collaboration
Cross-platform (i.e. works on Microsoft Windows, macOS and GNU/Linux)
Several Git clients such as GitHub Desktop and GitKraken are easy to use.
It’s fast to use
E-book projects don’t tend to have very large files, which is a notable shortcoming of Git

What is Git?

#
The Git logo

Git is a version control system and a popular way of managing software development by ensuring code is backed up and easily retrievable. 
The Git project itself was designed by none other than Linus Torvalds himself who needed a way to manage the development of the Linux kernel because the current BitKeeper version control system used at the time had pulled their free service, after Andrew Tridgell reverse-engineered their proprietary protocol (he would later do the same to the aforementioned SMB protocol and call it Samba).

#
Linus Torvalds invented the Linux kernel, Git and a diving app called Subsurface

Git’s unusual name was explained by Linus Torvalds in the project’s README file:

GIT - the stupid content tracker

&quot;git&quot; can mean anything, depending on your mood.

- random three-letter combination that is pronounceable, and not actually used by any common UNIX command.  The fact that it is a mispronounciation of &quot;get&quot; may or may not be relevant.
- stupid. contemptible and despicable. simple. Take your pick from the dictionary of slang.
- &quot;global information tracker&quot;: you're in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.
- &quot;goddamn idiotic truckload of sh*t&quot;: when it breaks

This is a stupid (but extremely fast) directory content manager. It doesn't do a whole lot, but what it _does_ do is track directory contents efficiently. 

Git can be used in the cloud via a dedicated hosting service such as GitHub, GitLab or BitBucket which I recommend for convenience. Alternatively, Git servers can be created on-premises via software such as Bonobo, Gogs or even GitLab.
Use of Git is mandatory for anyone using GitHub and GitLab, as well as being supported by other source code hosting sites such as BitBucket. 
I recommend Git for e-book development because it is fast and e-book projects don’t tend to have large files (more than 50MB) or empty folders, which are some of Git's notable shortcomings.
This chapter will give a basic outline of how Git works and how to use it. However, Git is very popular and there’s plenty of documentation available for it, including an official book (which is available for free on the official Git website) – I won't make this guide completely definitive.


Using Git at first may seem intimidating as there are a lot of jargon words to learn. However, I will explain each core feature and by the end, you should be able to start setting up your first repository with some confidence.


Git clients

To get started, I recommend using a Git client. There are a lot of Git clients, and official Git website keeps a list of them.


My personal choice of client is GitHub Desktop. GitHub Desktop is free and open-source with ports for Windows and macOS (and also albeit unofficially Debian, Fedora and AppImage). As its name heavily implies the client is owned by GitHub (now Microsoft) and connects with GitHub seamlessly, however it also supports connecting to other Git hosting services such as GitLab and Bitbucket along with self-hosted Git servers.


GitKraken is also a superb client with a beautiful user interface and has official builds for Windows, macOS and Ubuntu. However, for commercial use you must pay $50 per year.

The basics of Git

I find the easiest metaphor to describe Git is to think of a filing cabinet.
The repository is the cabinet itself and a branch is each drawer. You pull out a filing cabinet draw to access its contents, make your changes to the drawer, then note them down as a commit and you push the drawer closed when you are finished. A pull request in this analogy would be when one office worker requests access to another filing cabinet to alter a few files inside.
Here is a glossary of common terms used by Git with its corresponding icon on GitHub:

# Repository – A repository is an instance of Git that covers an entire folder and its files. This is where a project will be placed and all the source code files and resources that make it.

# Branch – A branch is the part of the repository where commits are added. By default, a Git repository uses the master (or main) branch and for basic Git use by an individual developer, this shouldn’t be a concern. 
For more complicated development, separate branches are used for development and testing. A branch can be merged bringing those changes to another branch or the branch can be split off. The way Git handles branching is the reason Git is referred to as a distributed source code management system.

# Commit – A commit is an alteration made to the repository that has been accepted by the developer. This includes any changes made to the files and folders including editing the text files, adding files, deleting files, moving files, etc. 
Most Git clients will show the differences between the files using colour-coding. A commit requires a short title for the Git commit log and an optional description which can be handy for keeping track of development and writing notes.

# Push – A push is the process of sending the commit from the development machine to the Git server.

# Pull – A pull is the process of retrieving previously pushed data to the Git server back onto the development machine. Through a combination of pushing and pulling a developer can work on the same code on multiple machines.

# Pull Request – A pull request is specific to Git hosting websites where a user requests permission for their commit to be pulled into the repository they don't have direct access to.

# Fork – A fork is a copy of the repository made from the latest commit to another user. Usually forks are made to preserve a repository or make alterations to the original in the form of a pull request.


Clone a repository from GitHub using GitHub Desktop

As mentioned earlier, setting up GitHub Desktop with GitHub is a snap. 
First and foremost you need to decide if the repository is already on GitHub or you want to add a repository to GitHub.


If the repository is already on GitHub, you can make a local copy of that repository on your development machine’s hard drive:


1. Go to File → Clone repository… (Ctrl-Shift-O).
2. Select the “GitHub.com” tab (the default) and click the “Sign in” button.
3. Sign in to GitHub using your account.
4. Choose a repository to clone and the preferred folder for the repository on your development machine’s storage (by default, it’s placed in Documents/GitHub).

After that you can open the repository’s folder in your file manager (such as File Explorer or Finder) or preferred text editor (such as Visual Studio Code or Atom).


Clone a repository from GitLab using GitHub Desktop

If the repository is already on GitLab it requires more involvement to make a copy on the development machine’s hard drive:

Login to GitLab.com in your preferred web browser, then select your preferred repository and copy the HTTPS link under the repository's name and description.

Create a SSH key to authenticate GitLab with GitHub desktop. This is done by opening up the Git Bash (Windows/macOS/GNU-Linux) or Terminal (macOS/GNU-Linux) then running this command (replace the e-mail in double-quotes with the GitLab account e-mail address): ssh-keygen -t rsa -C &quot;your.email@example.com&quot; -b 4096 then save the public-private key as a .pub file.

Authenticate the generated key by going to GitLab.com in your preferred browser and to your account’s settings and select “SSH Keys”. Add a new key by copying and pasting the public key half from the generated .pub file which begins with “ssh-rsa” into the text field then give it a name.

Go to File → Clone repository… (Ctrl-Shift-O).

Select the “URL” tab and paste the HTTPS link from earlier. Login to GitLab and then choose which repository to clone and where on the development machine’s hard drive to clone it to (the default is Documents/GitHub, but I rename it to Documents/GitLab).

I also recommend creating an access token on GitLab which you can use for GitHub Desktop and other third-party apps that need access to your GitLab account.

Go to your profile name and icon → Preferences
Access Token…

Committing and pushing to a repository in GitHub Desktop

Once changes have been made to the development machine’s copy of the repository, they can be committed to the repository on the Git server. GitHub Desktop makes committing a repository easy to do.


1. Select the files to commit and the branch to commit to (leave it as the Master branch if unsure).
2. Write a summary for the changes and if necessary a longer description.
3. Select “Submit” and then “Push origin”.
4. Select the “History” tab to ensure it has been committed properly.

References:

https://github.com/git/git/blob/e83c5163316f89bfbde7d9ab23ca2e25604af290/README

Further reading
Git’s popularity means there is a lot of documentation that goes into a more detail than I have in this chapter:

(Wikipedia page for Git)[https://en.wikipedia.org/wiki/Git], (archive)[https://archive.ph/Sm4Yf]
* (Git-SCM.com)[https://www.git-scm.com/] – the official website for the Git source code management tool with documentation on Git, a list of Git clients and a download for the current version.
* (Pro Git)[https://git-scm.com/book/en/v2] – the official and freely available book (and e-book) for Git which is available in multiple languages.
* (Learn Git)[https://try.github.io/] – GitHub’s official documentation on Git with many learning resources
* (Git Cheat Sheet)[https://about.gitlab.com/images/press/git-cheat-sheet.pdf] – a quick point of reference provided by GitLab showing a wide-range of common Git commands and what they do.
* (Git vs SVN)[https://backlog.com/blog/git-vs-svn-version-control-system/], (archive)[https://archive.ph/ysbaQ] – an insightful through rather advanced comparison of Git and SVN that suggests that one isn't necessarily superior to the other.

</Text>
        </Document>
        <Document ID="DA8FD144-AEE3-48E4-A3F9-3394F12D2A60">
            <Title>HTML entity tables</Title>
            <Text>HTML entity tables

As mentioned in the Introduction to XHTML chapter, entities allow the insertion of Unicode characters into both XHTML and regular HTML. Entities are declared using the ampersand (&amp;) character, its name or numeric value and then closed with a semi colon (;),
For convenience, I have provided tables which can be referred to when you need to insert a character into your e-book project. Keep in mind that some glyphs may not render if the font doesn’t support the required character set.
As mentioned previously I try to avoid using too many entities as it can make the XHTML pages less human-readable.

Reserved entities

The following characters must be used as entities because they form the HTML syntax and would otherwise result in an invalid page.


Character
Entity name
Entity value
Ampersand (&amp;)
&amp;amp;
&amp;#38;
Less than (&lt;)
&amp;lt;
&amp;#60;
Greater than (&gt;)
&amp;gt;
&amp;#62;


Diacritic entities

Diacritics are accents that are applied letters to indicate pronunciation or vocal emphasis. Strangely, English doesn’t use diacritics except for loan words though most languages use them in some form.
Depending on your keyboard layout, some characters are easy to insert and would easier to


Character
Entity name
Entity value
Latin “a” with acute (á)
&amp;amp;
&amp;#38;
Less than (&lt;)
&amp;lt;
&amp;#60;
Greater than (&gt;)
&amp;gt;
&amp;#62;


Symbol entities


</Text>
        </Document>
        <Document ID="F2985C11-FAA4-4B9D-BD6D-01F2EE8EFB29">
            <Title>What is an e-book?</Title>
            <Text>What is an e-book?
EPub
Amazon Kindle
The other formats</Text>
        </Document>
        <Document ID="FE5C06C7-3D7B-46D6-BE96-8034DA158070">
            <Title>List of Illustrations</Title>
        </Document>
    </Documents>
</SearchIndexes>
