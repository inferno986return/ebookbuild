<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="1B67AA19-6CBA-493E-AEBF-1E45B25BE441">
            <Title>Outline</Title>
            <Text>Outline
E-book formats
EPub
Mobi
Legacy formats
Required and recommended software
Text editor
Visual Studio Code (recommended)
Atom
Notepad++
Web browser
Brave (recommended)
Chrome
Firefox
Version control client
GitHub Desktop (recommended)
GitKraken - good, but $100 a year for commercial use
Alternative version control
Version control repository
GitHub (recommended)
GitLab
BitBucket
No version control
NAS setup
Terminal
Windows Terminal (recommended)
PDF reader
Adobe Reader DC (recommended)
Java SE
Python 3
E-book reader
Adobe Digital Editions (recommended)
Kindle Previewer (recommended)
Google Play Books
The ebookbuild folder structure
e-book
lib
META-INF
OEBPS
readme+licenses
Introduction to Visual Studio Code
What is a text editor?
The function keys
Introduction to Git
Introduction to XHTML
XHTML 101 - How XHTML works (head, body, declaration, tags, comments, entities)
Mozilla have a good reference for tags and browser compatibility
Heading tags - &lt;h1&gt;&lt;h2&gt;&lt;h3&gt;&lt;h4&gt;&lt;h5&gt;&lt;h6&gt;
Paragraph tags - &lt;p&gt;&lt;/p&gt;
Emphasis tags - &lt;b&gt;&lt;/b&gt; (formerly &lt;strong&gt;&lt;/strong&gt;) and &lt;i&gt;&lt;/i&gt; (formerly &lt;em&gt;&lt;/em&gt;), underline has no tag.
Span tags - &lt;span&gt;&lt;/span&gt;
Div tags - &lt;div&gt;&lt;/div&gt;
Image tags - &lt;img/&gt;
Break tags - &lt;br/&gt;
List tags - &lt;ol&gt;&lt;/ol&gt; and &lt;ul&gt;&lt;/ul&gt;, &lt;li&gt;&lt;/li&gt;
Table tags - &lt;table&gt;&lt;/table&gt;&lt;tr&gt;&lt;/tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;
Introduction to CSS
CSS 101 - How CSS works (classes, comments)
Introduction to Regular Expressions
Introduction to Typography
Typography 101
Screen vs print fonts
Classifications
Serif
Sans-serif
Monospace (fixed width)
Courier New
JetBrains Mono (recommended)
E-book-specific fonts
Bookerly
Ember
Roboto
Literata
Minion
Myriad
My first e-book
Common classes
Testing the e-book
Compiling the e-book

Appendices?

Manual of Style
Emphasis
Punctuation
Hyphens, en dashes and em dashes
Scene breaks
Annotated keyboard diagram
Explain the 
Regular expression cheatsheet
HTML entity table
HTML tag reference
Full zstylsheet CSS reference
ebookbuild code commentary
Background music suggestions
SOMA fm
Spotify
YouTube - Odysseus</Text>
        </Document>
        <Document ID="3E735A02-28ED-44F4-94C9-EDEF228BF9A8">
            <Title>Introduction to XHTML</Title>
            <Text>Introduction to XHTML

&quot;XML is a very simple syntax resembling HTML — angle-bracketed tags and ampersand-led literal
sequences. It is about as simple as a plain-text markup can be and yet express recursively nested
data structures. XML is just a low-level syntax; it requires a document type definition (such as
XHTML) and associated application logic to give it semantics.&quot; —Eric S. Raymond, Art of Unix Programming

XHTML (eXtensible HyperText Markup Language) is the recommended language for creating the actual chapters of an e-book, it combines regular HTML (HyperText Markup Language) that is used to create webpages with XML (eXtensible Markup Language). Alternatively, you can use regular HTML though you can’t define custom tags (or can you?) and web browsers are more tolerant of obvious syntax errors when testing.
So what is XHTML? To start with I have used Eric S. Raymond’s definition of XML as a springboard. All three standards are markup languages this means that the developer has to define what the file’s content will look like using some kind of syntax (if you understand LaTeX or Markdown this should be familiar), which in this case are tags.
Tags are made using a less-than symbol (&lt;) followed by one word, abbreviation or letter then by a greater-than symbol (&gt;), the text content itself is then written inside the tag and then closed with a closing tag that is identical though with a forward slash (/) after the less-than symbol. Some tags are “self-closing” this means that they are defined in just one tag with a less-than symbol, tag name, then the forward slash and the greater-than symbol. Each tag represents a specific type of content such as headings, paragraphs, images, tables, or numbered and bullet point lists. 
I would recommend taking a look at one of the .xhtml files of this e-book while I explain the concepts. 
There are 3 parts to an XHTML file:

Declaration - defines to the web browser or e-reader what the file is, what standard of HTML/XML and what character encoding it uses.
Head - defines to the web browser or e-reader, the files and metadata the XHTML file uses.
Body - defines the actual content that the user will see in their web browser or e-reader.

Declaration
We start the file with a declaration to let the e-reader or web browser know this is an XHTML file. I usually copy-paste this and leave it alone.

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot; ?&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;

I always use UTF-8 as it has a large language support including accented Latin characters, Greek and Cyrillic (the writing system used in Russia, Ukraine and several Baltic states).

Head
The head defines information about the XHTML file that the user doesn’t see. Similarly to the declaration, I barely change this except for the optional title tag so I can see the chaper’s name in my web browser during testing.

&lt;head&gt;
	&lt;meta content=&quot;http://www.w3.org/1999/xhtml; charset=utf-8&quot; http-equiv=&quot;Content-Type&quot;/&gt;
	&lt;link href=&quot;styles/zstylesheet.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;
	&lt;title&gt;Acknowledgements&lt;/title&gt;
&lt;/head&gt;

The head tag is where external CSS (Cascading StyleSheets) files (that use the .css file extensions) are declared.

Body
The body is all the content that the user will see (with the exception of comments) and is the majority of the XHTML file.

Heading tags
There are 6 tags for defining headings &lt;h1&gt;&lt;/h1&gt;, &lt;h2&gt;&lt;/h2&gt;, &lt;h3&gt;&lt;/h3&gt;, &lt;h4&gt;&lt;/h4&gt;, &lt;h5&gt;&lt;/h5&gt; and &lt;h6&gt;&lt;/h6&gt;. I don’t think I’ve used all of them in just one project though because there are classes defined for their specific use…

Paragraph tags

Image tag

Bullet point list tags

Numbered list tags

Table tags
Tables are a bit more difficult to define in XHTML, so I recommend arranging them neatly to avoid getting confused. There are 4 tags for defining tables &lt;table&gt;&lt;/table&gt;, &lt;tr&gt;&lt;/tr&gt;, &lt;th&gt;&lt;/th&gt; and &lt;td&gt;&lt;/td&gt;.

&lt;table&gt;&lt;/table&gt; behaves like a division tag and are the parent tags for the whole table. All table content will go inside these.

&lt;tr&gt;&lt;/tr&gt; are the table row tags and define each row.

&lt;th&gt;&lt;/th&gt; are the optional table heading tags.

&lt;td&gt;&lt;/td&gt; are the table data tags which defines each cell.


</Text>
        </Document>
        <Document ID="4CC8D85D-0226-4243-BBEF-174ED2BCCF7F">
            <Title>Google Keep notes</Title>
            <Text>
Documents vs e-books
Fixed and reflowable ePubs
Introduction to typography
Serif
Sans-serif
Monospace (or fixed-width)
E-book reader fonts
Unicode
Latin
Monotonic/Polytonic Greek
Cyrillic
Scene break
Dropcaps
Function keys on a keyboard
Anatomy of a book
The ePub standard documentation - epubcheck
Openness and transparency
How I got into e-book production – learnt at my first job where I attempted an apprenticeship.
I refer to Andy as mentor, after playing a lot of Assassin's Creed when I was conceptualising this book.
Steal this e-book with tape and crossbones
From what I understand reading about Eric S. Raymond and Richard Stallman, your approach and principles to software development stem from the environment you worked in.
The old system was a mixture of several programming languages, as well as a dependency on a popular productivity suite. To me this is an unnecessary dependency that creates vendor lock-in and limits portability.
Why use ebookbuild - vendor lock-in
The satisfaction of creating my open-source watchface Pokétch Digital and having it forked.
Daniel Pink on Drive and agile development
Harvard and numerical referencing
Plenty of examples of how to use tags
UTF-8, Unicode, and ASCII
Software - Text editors, ... One that is recommended and then others.
Create your own documentation and pull-request back stuff that is useful. Taken a gnuplot approach to development.
Notetaking via OneNote, though GitHub/GitLab have wiki pages.

&quot;XML is a very simple syntax resembling HTML — angle-bracketed tags and ampersand-led literal
sequences. It is about as simple as a plain-text markup can be and yet express recursively nested
data structures. XML is just a low-level syntax; it requires a document type definition (such as
XHTML) and associated application logic to give it semantics.&quot;
-Eric S. Raymond, Art of Unix Programming



Future: ONIX, ePub 3, Bookscanning and OCR, 4 levels of indentation, GUI frontend for ebookbuild, ebookbuild rewrite, typesetting using InDesign or Affinity Publisher, audiobook production, distribution via Amazon Kindle, Google Play and itch.io, DRM, anti-piracy manifesto

Related formats such as cbz?</Text>
        </Document>
        <Document ID="7433E120-006A-4AE3-BCA4-90A934374CA0">
            <Title>Introduction to Typography</Title>
            <Text>Introduction to Typography

Typography has been an important part of book design since its inception and remains significant when typesetting. 
In the case of e-books usually the default fonts are selected by the e-reader’s developer.

Serif
Serif fonts have a stroke at the end of each letter and number, as well as other characters. 

2015 was a big year in e-book typography because Google and Amazon commissioned bespoke fonts designed for long reading sessions on a screen.

Amazon has its own bespoke Bookerly font since 2015 primarily for its Kindle e-readers and reading apps.

Google has its own bespoke Literata font family…

Sans-serif
Monospaced (or fixed width)
Monospaced (also called fixed-width) fonts have each letter, number and symbol as the same width to assist with readability. They are usually used for technical purposes…

Historically, Courier and its successor Courier New which were modelled from typewriters were prominent examples of monospaced typography. 
Nowadays there are plenty of monospaced fonts to choose from that are either preinstalled on the operating system or can be downloaded for free.

JetBrains Mono is my current choice of monospaced font.</Text>
        </Document>
        <Document ID="93C40D99-4B3D-4900-9243-676053C92F0D">
            <Title>Future content</Title>
            <Text>Future Content
These are chapters I don’t have much content for at the moment. Stay tuned!

Bookscanning and OCR

In my last job my boss used an inverted “V” cradle made from glass and metal, then would take a photograph of each page using a DSLR camera. The photos would be imported into ABBYY FineReader for the text to be extracted using optical character recognition (OCR), before exporting to a Microsoft Word document. He considered this a significant improvement over the previous method of destructively removing each page individually from the binding and then scanning them with a flatbed scanner.
I am still developing my bookscanning process. I have been looking into free software alternatives to ABBYY FineReader such as Google’s Tesseract which is used in OpenOCR. I often make use of Google Photos’ own OCR engine and find it highly accurate. In the long-term I plan on purchasing and testing the CZUR book scanner.
https://www.diybookscanner.org/en/index.html has instructions on a homemade bookscanner. The website looks to have been neglected for a significant period of time and has missing images. Check https://archive.is/

Typesetting

Affinity Publisher (recommended)
Adobe InDesign

E-book distribution

You now have a finished ePub. But how do you sell it?

Amazon Kindle - Kindle Unlimited
Google Play Books
Apple Books
Kobo
itch.io

Digital Rights Management (DRM)

The ePub standard is intentionally neutral on the use of digital rights management (DRM) to control how customers interact with their e-book purchase. I am personally hostile to DRM because I find it inconvenient for the customer and most e-book DRM standards are bypassable anyway with freely-available public tools.
In my own research the DRM scheme I found the most difficult to bypass was VitalSource’s e-book file .vbk. Previously it was possible to see the XHTML source with the Chrome inspector, though that was patched recently after.

Adobe DRM (ADEPT)

Adobe DRM is used by Google Play Books and several other distributors, allowing offline reading on Adobe Digital Editions and Bluefire. It requires the user to activate Adobe Digital Editions with their Adobe ID (or create one), then authorise their computer. Once authorised download the .acsm file and then import it to download the actual ePub.

Adobe allow a total of 6 authorisations and it seems that resetting this amount requires contacting their customer support: https://community.adobe.com/t5/digital-editions-discussions/i-need-to-have-my-authorizations-reset-for-digital-editions-but-cannot-contact-anyone-at-adobe/td-p/5511638

From personal experience I have found Adobe DRM to be difficult to use requiring first contacting Google’s customer support and then on online forums for activation.
Keep in mind that when distributing using Adobe Digital Editions the XHTML and CSS code is accessible by extracting the ePub using an archiving program like 7-Zip.

Amazon DRM - AZW, KFX

Amazon use their own DRM for their Kindle e-books. The current standard is (KFX). Amazon provide reading apps on the web, smartphone/tablet and on Windows and macOS…

ONIX for Books

ONIX for Books is an XML-based standard for sharing book data between publishers, distributors and retailers using predefined fields and categories (defined as “code lists”).
I plan on creating my own libre ONIX editor and documentation for the perfect ONIX document. However, for the time being I recommend looking into ONIXEdit or creating your own ONIX record using spreadsheet software such as Microsoft Excel.
https://www.editeur.org/14/Code-Lists/

Source code obfuscation
“In software development, obfuscation is the deliberate act of creating source or machine code that is difficult for humans to understand.” -Obfuscation (software) article on Wikipedia

Source code obfuscation in software development makes it trickier to reverse-engineer a compile executable to find the original source code. Usually these are alterations made before or during compile time which don’t alter functionality.
While ebookbuild is libre software, I am interested in ways of achieving this for users who want an output that hides the exact XHTML and CSS code from a tinkering end-user.
After giving this process some thought I can only think of using Calibre ( ironically given ebookbuild’s goal to avoid autogenerated “meatground” code inside its ePub output). Calibre in my experience has a complex structure to its XHTML and CSS structure.

Fingerprinting

Fingerprinting is a method for identifying unique builds of an e-book. This could be used for review copies or ARC (advanced reader copies) to identify who leaked an e-book prior to release.
So far my only approach is to rely on checksums as they are unique to each build. Another way is to add comments referring to the reviewer in the XHTML or CSS code.</Text>
        </Document>
        <Document ID="9C43D21D-C973-4DD8-857E-08EB9C396879">
            <Title>Preface</Title>
            <Text>Preface

Welcome to e-book development - much of this preface is expository, feel free to skip ahead.
Standing on the shoulders of giants
I want to impart over 2 years of knowledge and experience I learned about e-book development. As well as the improvements I have made since then.
My tenure at Oxford Ebooks Ltd.
My failed apprenticeship - I learnt a lot during my 1 year working at Oxford Ebooks…
What I learnt at marketing - we had a scattershot approach for picking up prospects - years later I would encounter The One Page Marketing Plan and realise how flawed this was.
Philosophical differences between myself and Andy Severn. What I recall from 6 years ago. The highly competitive video game industry has very little room for free software philosophy, except for a few exceptions such as Doom.
The job got me into digital book content
I still buy books published by Oxford eBooks and sci-fi-cafe.com.
I listen to audiobooks on Audible, infact I secured a free copy of The Seed Planet
I recommend A Clockwork Orange by Anthony Burgess and The Art of the Argument by Stefan Molyneux, in particular. If you are particularly ready to have your perspective of heterosexual relations completely torn up I would also suggest The Rational Male book series by Rollo Tomassi.
Why use ebookbuild?
An open approach to e-book development using free software principles of open source code and abundant documentation. As well as cross-platform technologies with no vendor lock-in.
Entire control over the e-book’s presentation
No “meatgrinding” - The pitfalls of autogenerated code

This book is interactive. Feel free to check the e-book code on GitHub.</Text>
        </Document>
        <Document ID="AA04C080-54B1-4AA8-993B-21F0F0F09032">
            <Title>Preface</Title>
            <Text>Preface

“If I have seen further than others, it is by standing upon the shoulders of giants.”
—Isaac Newton, in a 1675 letter to Robert Hooke

I have written this preface to explain the my justification for the ebookbuild project and my motivations for creating it. If this isn’t interesting to you, feel free to skip ahead.

Welcome to e-book development

By reading this book you are at least curious about the process of e-book development and the best way to have complete control over your project.

Why ebookbuild?

Origins

The ebookbuild project exists, because I am unsatisfied with using the current e-book development software out there and want full control over my projects.
I started my first job back in September 2014 at the age of 21, working for Oxford eBooks Ltd.
Oxford eBooks a very small publishing house that provided e-book development services for a variety of clientele ranging from both small and medium publishers, as well as independent authors.
E-books created there were made from scratch using XHTML and CSS in a text editor, quickly tested using a web browser to ensure the chapters are at least visible and then compiled using proprietary tools to generate a ePub file. 
The ePub would be run through epubcheck, the official tool created by the owner of the ePub standard to ensure it had “No errors or warnings detected.” An e-book that repeatedly failed epubcheck would need to be continuously worked on until it was ready for final testing.
Testing was performed in e-reader to ensure it at least matched, or even improved the supplied manuscript. Any alterations would be recorded in a conversion log which allowed for easy scrutiny and reversion (to revert).
This meticulous approach to e-book development is the foundation and chief inspiration for the ebookbuild project.

Improvements

At the time I created Project Zylon as a means to continue e-book development after I left Oxford eBooks Ltd. a year later. After consideration I wanted to formerly name the project as something relevant, easy to remember and that would resemble a terminal command so I chose ebookbuild. This is why I stylistically choose to write ebookbuild in a monospaced font.
I had formally been introduced to both the concept and development process of an e-book, but wanted to do more with the technology as much of the e-book projects I worked on were novels, religious books and the occasional non-fiction biography. I wanted new projects such as cookbooks, technology books and antiquarian remasters.
Another desire, was to release the source code publicly under a licence approved by either the Open Source Initiative (OSI) or the Free Software Foundation (FSF) to facilitate further improvements and usage. I have admired the concept of free software since I first learnt about it in 2012 and my affection for it went up when I released my Pokétch Digital watchface for the Pebble smartwatch under the permissive MIT licence. The project has 10 stars on GitHub and been forked several times which is impressive considering I am by no means a C programmer.

//Picture of the Pokétch Digital watchface

The old tools that used and I can barely speak of in fear of reprisal weren’t ideal and violated core principles. I had become accustomed to these principles when reading about the history and philosophy of free software (as defined by Richard Stallman and the GNU project), so I wanted something I had complete control over that could grow into a useful set of tools for anyone with an interest in creating e-books from scratch.
I created the ebookbuild so it had no proprietary dependencies and could be used cross-platform. Then made it available under GNU General Public License 3 (GPLv3) to encourage, but also enforce sharing the tool to make it available to as many interested people as possible.

#
Much of the ebookbuild project is licenced under GNU GPLv3.

One of the prerequisites for free software is good documentation. So I have created an e-book that references as much as I have learnt in my one year in commercial e-book development, but the many years after. I want to make it accessible as possible so I have released it under a Creative Commons licence to encourage mass-sharing. The source code is on GitHub and I encourage raising issues and pull requests.
Lastly, I released technical files that are required for e-book production such as XHTML, CSS and JSON files under the Creative Commons Zero (CC0) licence, making them effectively public domain. I don’t think the code used for these files isn’t particularly special or unique, so they can be re-purposed outside of ebookbuild uncredited, though credit is appreciated.


References:

1. Note: My former boss was stringent about trade secrecy and non disclosure agreements (NDA),  owing to his background in video game development. I have described the process I was taught using a combination of information from the business terms page on the company website, as well as other public sources.

2. The GNU project defines free software as: “Free software” means software that respects users' freedom and community. Roughly, it means that the users have the freedom to run, copy, distribute, study, change and improve the software. Thus, “free software” is a matter of liberty, not price. To understand the concept, you should think of “free” as in “free speech,” not as in “free beer.” We sometimes call it “libre software,” borrowing the French or Spanish word for “free” as in freedom, to show we do not mean the software is gratis.
You may have paid money to get copies of a free program, or you may have obtained copies at no charge. But regardless of how you got your copies, you always have the freedom to copy and change the software, even to sell copies.

3. It’s worth juxtaposing copyleft with copyfree.
	Copyleft licencing such as GPLv3 ensures all publicly released copies of a program must have their source code available with the permission to make alterations and compile them into a new program.
	Copyfree licencing such as MIT ensures the developer who first modifies the source code has control over the availability of the source code, alterations made to it and distribution of the new program.





</Text>
        </Document>
        <Document ID="DA8FD144-AEE3-48E4-A3F9-3394F12D2A60">
            <Title>HTML entity tables</Title>
            <Text>HTML entity tables

As mentioned in the Introduction to XHTML chapter, entities allow the insertion of Unicode characters into both XHTML and regular HTML. Entities are declared using the ampersand (&amp;) character, its name or numeric value and then closed with a semi colon (;),
For convenience, I have provided tables which can be referred to when you need to insert a character into your e-book project. Keep in mind that some glyphs may not render if the font doesn’t support the required character set.
As mentioned previously I try to avoid using too many entities as it can make the XHTML pages less human-readable.

Reserved entities

The following characters must be used as entities, as they form the HTML syntax and would otherwise result in an invalid page.


Character
Entity name
Entity value
Ampersand (&amp;)
&amp;amp;
&amp;#38;
Less than (&lt;)
&amp;lt;
&amp;#60;
Greater than (&gt;)
&amp;gt;
&amp;#62;


Diacritic entities

Diacritics are accents that are applied letters to indicate pronunciation or vocal emphasis. Strangely, English doesn’t use diacritics except for loan words though most languages use them in some form.
Depending on your keyboard layout, some characters are easy to insert and would easier to


Character
Entity name
Entity value
Latin “a” with acute (á)
&amp;amp;
&amp;#38;
Less than (&lt;)
&amp;lt;
&amp;#60;
Greater than (&gt;)
&amp;gt;
&amp;#62;


Symbol entities


</Text>
        </Document>
        <Document ID="F2985C11-FAA4-4B9D-BD6D-01F2EE8EFB29">
            <Title>What is an e-book?</Title>
            <Text>What is an e-book?
EPub
Amazon Kindle
The other formats</Text>
        </Document>
    </Documents>
</SearchIndexes>
