<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="1B67AA19-6CBA-493E-AEBF-1E45B25BE441">
            <Title>Outline</Title>
            <Text>Outline
E-book formats
ePub
Mobi
Legacy formats
Required and recommended software
Text editor
Visual Studio Code (recommended)
Atom
Notepad++
Web browser
Brave (recommended)
Chrome
Firefox
Version control client
GitHub Desktop (recommended)
GitKraken - good, but $100 a year for commercial use
Alternative version control
Version control repository
GitHub (recommended)
GitLab
BitBucket
No version control
NAS setup
Terminal
Windows Terminal (recommended)
PDF reader
Adobe Reader DC (recommended)
Java SE
Python 3
E-book reader
Adobe Digital Editions (recommended)
Kindle Previewer (recommended)
Google Play Books
The ebookbuild folder structure
e-book
lib
META-INF
OEBPS
readme+licenses
Introduction to Visual Studio Code
What is a text editor?
The function keys
Introduction to Git
Introduction to XHTML
XHTML 101 - How XHTML works (head, body, declaration, tags, comments, entities)
Mozilla have a good reference for tags and browser compatibility
Heading tags - &lt;h1&gt;&lt;h2&gt;&lt;h3&gt;&lt;h4&gt;&lt;h5&gt;&lt;h6&gt;
Paragraph tags - &lt;p&gt;&lt;/p&gt;
Emphasis tags - &lt;b&gt;&lt;/b&gt; (formerly &lt;strong&gt;&lt;/strong&gt;) and &lt;i&gt;&lt;/i&gt; (formerly &lt;em&gt;&lt;/em&gt;), underline has no tag.
Span tags - &lt;span&gt;&lt;/span&gt;
Div tags - &lt;div&gt;&lt;/div&gt;
Image tags - &lt;img/&gt;
Break tags - &lt;br/&gt;
List tags - &lt;ol&gt;&lt;/ol&gt; and &lt;ul&gt;&lt;/ul&gt;, &lt;li&gt;&lt;/li&gt;
Table tags - &lt;table&gt;&lt;/table&gt;&lt;tr&gt;&lt;/tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;
Introduction to CSS
CSS 101 - How CSS works (classes, comments)
Introduction to Regular Expressions
Introduction to Typography
Typography 101
Screen vs print fonts
Classifications
Serif
Sans-serif
Monospace (fixed width)
Courier New
JetBrains Mono (recommended)
E-book-specific fonts
Bookerly
Ember
Roboto
Literata
Minion
Myriad
My first e-book
Common classes
Testing the e-book
Compiling the e-book

Appendices?

Manual of Style
Emphasis
Punctuation
Hyphens, en dashes and em dashes
Scene breaks
Annotated keyboard diagram
Explain the 
Regular expression cheatsheet
HTML entity table
Full CSS reference
ebookbuild code commentary
Background music suggestions
SOMA fm
Spotify
YouTube - Odysseus</Text>
        </Document>
        <Document ID="4CC8D85D-0226-4243-BBEF-174ED2BCCF7F">
            <Title>Google Keep notes</Title>
            <Text>Introduction to typographySerifSans-serifMonospace (or fixed width)E-book reader fontsUnicodeLatinMonotonic/Polytonic GreekCyrillicScene breakDropcapsFunction keys on a keyboard </Text>
        </Document>
        <Document ID="93C40D99-4B3D-4900-9243-676053C92F0D">
            <Title>Future content</Title>
            <Text>Future Content

Bookscanning and OCR

In my last job my boss used an inverted “V” cradle made from glass and metal, then would take a photograph of each page using a DSLR camera. The photos would be imported into ABBYY FineReader for the text to be extracted using optical character recognition (OCR), before exporting to a Microsoft Word document. He considered this a significant improvement over the previous method of destructively removing each page individually from the binding and then scanning them with a flatbed scanner.
I am still developing my bookscanning process. I have been looking into free software alternatives to ABBYY FineReader such as Google’s Tesseract. I often make use of Google Photos’ own OCR engine and find it highly accurate. In the long-term I plan on purchasing and testing the CZUR book scanner.

</Text>
        </Document>
        <Document ID="9C43D21D-C973-4DD8-857E-08EB9C396879">
            <Title>Preface</Title>
            <Text>Preface

Welcome to e-book development - much of this preface is expository, feel free to skip ahead.
Standing on the shoulders of giants
I want to impart over 2 years of knowledge and experience I learned about e-book development. As well as the improvements I have made since then.
My tenure at Oxford Ebooks Ltd.
My failed apprenticeship - I learnt a lot during my 1 year working at Oxford Ebooks…
What I learnt at marketing - we had a scattershot approach for picking up prospects - years later I would encounter The One Page Marketing Plan and realise how flawed this was.
Philosophical differences between myself and Andy Severn. What I recall from 6 years ago. The highly competitive video game industry has very little room for free software philosophy, except for a few exceptions such as Doom.
The job got me into digital book content
I still buy books published by Oxford eBooks and sci-fi-cafe.com.
I listen to audiobooks on Audible, infact I secured a free copy of The Seed Planet
I recommend A Clockwork Orange by Anthony Burgess and The Art of the Argument by Stefan Molyneux, in particular. If you are particularly ready to have your perspective of heterosexual relations completely torn up I would also suggest The Rational Male book series by Rollo Tomassi.
Why use ebookbuild?
An open approach to e-book development using free software principles of open source code and abundant documentation. As well as cross-platform technologies with no vendor lock-in.
Entire control over the e-book’s presentation
No “meatgrinding” - The pitfalls of autogenerated code

This book is interactive. Feel free to check the e-book code on GitHub.</Text>
        </Document>
        <Document ID="AA04C080-54B1-4AA8-993B-21F0F0F09032">
            <Title>Preface</Title>
            <Text>Preface

“If I have seen further than others, it is by standing upon the shoulders of giants.”
—Isaac Newton, in a 1675 letter to Robert Hooke

I have written this preface to explain the my justification for the ebookbuild project and my motivations for creating it. If this isn’t interesting to you, feel free to skip ahead.

Welcome to e-book development

By reading this book you are at least curious about the process of e-book development and the best way to have complete control over your project.

Why ebookbuild?

Origins

The ebookbuild project exists, because I am unsatisfied with using the current e-book development software out there and want full control over my projects.
I started my first job back in September 2014 at the age of 21, working for Oxford eBooks Ltd.
Oxford eBooks a very small publishing house that provided e-book development services for a variety of clientele ranging from both small and medium publishers, as well as independent authors.
E-books created there were made from scratch using XHTML and CSS in a text editor, quickly tested using a web browser to ensure the chapters are at least visible and then compiled using proprietary tools to generate a ePub file. 
The ePub would be run through epubcheck, the official tool created by the owner of the ePub standard to ensure it had “No errors or warnings detected.” An e-book that repeatedly failed epubcheck would need to be continuously worked on until it was ready for final testing.
Testing was performed in e-reader to ensure it at least matched, or even improved the supplied manuscript. Any alterations would be recorded in a conversion log which allowed for easy scrutiny and reversion (to revert).
This meticulous approach to e-book development is the foundation and chief inspiration for the ebookbuild project.

Improvements

At the time I created Project Zylon as a means to continue e-book development after I left Oxford eBooks Ltd. a year later. After consideration I wanted to formerly name the project as something relevant, easy to remember and that would resemble a terminal command so I chose ebookbuild. This is why I stylistically choose to write ebookbuild in a monospaced font.
I had formally been introduced to both the concept and development process of an e-book, but wanted to do more with the technology as much of the e-book projects I worked on were novels, religious books and the occasional non-fiction biography. I wanted new projects such as cookbooks, technology books and antiquarian remasters.
Another desire, was to release the source code publicly under a licence approved by either the Open Source Initiative (OSI) or the Free Software Foundation (FSF) to facilitate further improvements and usage. I have admired the concept of free software since I first learnt about it in 2012 and my affection for it went up when I released my Pokétch Digital watchface for the Pebble smartwatch under the permissive MIT licence. The project has 10 stars on GitHub and been forked several times which is impressive considering I am by no means a C programmer.

//Picture of the Pokétch Digital watchface

The old tools that used and I can barely speak of in fear of reprisal weren’t ideal and violated principles I had become accustomed to when reading about the history and philosophy of free software (as defined by Richard Stallman and the GNU project). I wanted something I had complete control over that could grow into a useful set of tools that anyone with a desire for control could have.
I created the ebookbuild so it had no proprietary dependencies and could be used cross-platform. Then made it available under GNU General Public License 3 (GPLv3) to encourage, but also enforce sharing the tool to make it available to as many interested people as possible.
One of the prerequisites for free software is good documentation. So I have created an e-book that references as much as I have learnt in my one year in commercial e-book development, but the many years after. I want to make it accessible as possible so I have released it under a Creative Commons licence to encourage mass-sharing. The source code is on GitHub and I encourage raising issues and pull requests.
Lastly, the project files that facilitate creating e-books outside of the content itself such as XHTML, CSS and JSON files are released under the Creative Commons Zero (CC0) licence, effectively public domain. I don’t think the code used for these files isn’t particularly special or unique, so they can be re-purposed outside of ebookbuild uncredited, though credit is appreciated.


References:

1. Note: My former boss was stringent about trade secrecy and non disclosure agreements (NDA),  owing to his background in video game development. I have described the process I was taught using a combination of information from the business terms page on the company website, as well as other public sources.

2. The GNU project defines free software as: “Free software” means software that respects users' freedom and community. Roughly, it means that the users have the freedom to run, copy, distribute, study, change and improve the software. Thus, “free software” is a matter of liberty, not price. To understand the concept, you should think of “free” as in “free speech,” not as in “free beer.” We sometimes call it “libre software,” borrowing the French or Spanish word for “free” as in freedom, to show we do not mean the software is gratis.
You may have paid money to get copies of a free program, or you may have obtained copies at no charge. But regardless of how you got your copies, you always have the freedom to copy and change the software, even to sell copies.

3. It’s worth juxtaposing copyleft with copyfree.
	Copyleft ensures all publicly released copies of a program must have their source code available with the permission to make alterations and compile them into a new program.
	Copyfree ensures the developer who first modifies the source code has control over the availability of the source code, alterations made to it and distribution of the new program.





</Text>
        </Document>
        <Document ID="DA8FD144-AEE3-48E4-A3F9-3394F12D2A60">
            <Title>HTML entity tables</Title>
            <Text>HTML entity tables

As mentioned in the Introduction to XHTML chapter, entities allow the insertion of Unicode characters into both XHTML and regular HTML. Entities are declared using the ampersand (&amp;) character, its name or numeric value and then closed with a semi colon (;),
For convenience, I have provided tables which can be referred to when you need to insert a character into your e-book project. Keep in mind that some glyphs may not render if the font doesn’t support the required character set.
As mentioned previously I try to avoid using too many entities as it can make the XHTML pages less human-readable.

Reserved entities

The following characters must be used as entities, as they form the HTML syntax and would otherwise result in an invalid page.


Character
Entity name
Entity value
Ampersand (&amp;)
&amp;amp;
&amp;#38;
Less than (&lt;)
&amp;lt;
&amp;#60;
Greater than (&gt;)
&amp;gt;
&amp;#62;


Diacritic entities

Diacritics are accents that are applied letters to indicate pronunciation or vocal emphasis. Strangely, English doesn’t use diacritics except for loan words though most languages use them in some form.
Depending on your keyboard layout, some characters are easy to insert and would easier to


Character
Entity name
Entity value
Latin “a” with acute (á)
&amp;amp;
&amp;#38;
Less than (&lt;)
&amp;lt;
&amp;#60;
Greater than (&gt;)
&amp;gt;
&amp;#62;


Symbol entities


</Text>
        </Document>
        <Document ID="F2985C11-FAA4-4B9D-BD6D-01F2EE8EFB29">
            <Title>What is an e-book?</Title>
            <Text>What is an e-book?
EPub
Amazon Kindle
The other formats</Text>
        </Document>
    </Documents>
</SearchIndexes>
